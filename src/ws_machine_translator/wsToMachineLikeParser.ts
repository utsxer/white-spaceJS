
// Generated by peggy v. 2.0.1 (ts-pegjs plugin v. 2.1.0 )
//
// https://peggyjs.org/   https://github.com/metadevpro/ts-pegjs

"use strict";

export interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
  source: string;
}

export interface ILiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface IClassParts extends Array<string | IClassParts> {}

export interface IClassExpectation {
  type: "class";
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface IAnyExpectation {
  type: "any";
}

export interface IEndExpectation {
  type: "end";
}

export interface IOtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = ILiteralExpectation | IClassExpectation | IAnyExpectation | IEndExpectation | IOtherExpectation;

function peg$padEnd(str: string, targetLength: number, padString: string) {
  padString = padString || ' ';
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

export class SyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return "\"" + literalEscape(expectation.text) + "\"";
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) + "-" + classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: IFileRange;
  public name: string;

  constructor(message: string, expected: Expectation[], found: string | null, location: IFileRange) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof (Object as any).setPrototypeOf === "function") {
      (Object as any).setPrototypeOf(this, SyntaxError.prototype);
    } else {
      (this as any).__proto__ = SyntaxError.prototype;
    }
    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }

  format(sources: { source: string; text: string }[]): string {
    let str = 'Error: ' + this.message;
    if (this.location) {
      let src: string[] | null = null;
      let k;
      for (k = 0; k < sources.length; k++) {
        if (sources[k].source === this.location.source) {
          src = sources[k].text.split(/\r\n|\n|\r/g);
          break;
        }
      }
      let s = this.location.start;
      let loc = this.location.source + ':' + s.line + ':' + s.column;
      if (src) {
        let e = this.location.end;
        let filler = peg$padEnd('', s.line.toString().length, ' ');
        let line = src[s.line - 1];
        let last = s.line === e.line ? e.column : line.length + 1;
        str += '\n --> ' + loc + '\n' + filler + ' |\n' + s.line + ' | ' + line + '\n' + filler + ' | ' +
          peg$padEnd('', s.column - 1, ' ') +
          peg$padEnd('', last - s.column, '^');
      } else {
        str += '\n at ' + loc;
      }
    }
    return str;
  }
}

function peg$parse(input: string, options?: IParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions: {[id: string]: any} = { start: peg$parsestart };
  let peg$startRuleFunction: () => any = peg$parsestart;

  const peg$c0 = function(test: any): any {return test;};
  const peg$c1 = function(stackManipValue: any): any {return stackManipValue;};
  const peg$c2 = function(pushNumber: any): any { 
  	return "push " + pushNumber;
  	};
  const peg$c3 = function(): any {return "dup"};
  const peg$c4 = function(copyNumber: any): any {return "copy "+ copyNumber;};
  const peg$c5 = function(): any {return "swap";};
  const peg$c6 = function(): any {return "discard"};
  const peg$c7 = function(slideNumber: any): any {return "slide "+ slideNumber;};
  const peg$c8 = function(arithValue: any): any {return arithValue;};
  const peg$c9 = function(): any {return "add";};
  const peg$c10 = function(): any {return "sub";};
  const peg$c11 = function(): any {return "mul";};
  const peg$c12 = function(): any {return "div";};
  const peg$c13 = function(): any {return "mod";};
  const peg$c14 = function(heapValue: any): any {return heapValue;};
  const peg$c15 = function(): any {return "store";};
  const peg$c16 = function(): any {return "retrieve";};
  const peg$c17 = function(flowValue: any): any {return flowValue};
  const peg$c18 = function(markLabel: any): any {return "mark "+markLabel};
  const peg$c19 = function(callLabel: any): any {return "call "+ callLabel};
  const peg$c20 = function(jumpLabel: any): any {return "jmp "+ jumpLabel};
  const peg$c21 = function(jumpzLabel: any): any {return "jmpz " +jumpzLabel};
  const peg$c22 = function(jumpnLabel: any): any {return "jmpn "+jumpnLabel};
  const peg$c23 = function(): any {return "ends"};
  const peg$c24 = function(): any {return "end"};
  const peg$c25 = function(ioVal: any): any {return ioVal};
  const peg$c26 = function(): any {return "put_char"};
  const peg$c27 = function(): any {return "put_num"};
  const peg$c28 = function(): any {return "read_char"};
  const peg$c29 = function(): any {return "read_num"};
  const peg$c30 = function(label: any): any {return getLabel(label);};
  const peg$c31 = function(number: any): any {
  	return parseInt(getSign(number[0])+getIntNumber(number[1]),10)};
  const peg$c32 = " ";
  const peg$c33 = peg$literalExpectation(" ", false);
  const peg$c34 = "\t";
  const peg$c35 = peg$literalExpectation("\t", false);
  const peg$c36 = "\n";
  const peg$c37 = peg$literalExpectation("\n", false);
  const peg$c38 = "\r\n";
  const peg$c39 = peg$literalExpectation("\r\n", false);

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): IFileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean): ILiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts: IClassParts, inverted: boolean, ignoreCase: boolean): IClassExpectation {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation(): IAnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): IEndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): IOtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): IFileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: IFileRange) {
    return new SyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: IFileRange) {
    return new SyntaxError(
      SyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parsestart(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseIMP();
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseIMP();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIMP(): any {
    let s0;

    s0 = peg$parseStackManipulation();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseArithumetic();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseHeapAccess();
        if (s0 as any === peg$FAILED) {
          s0 = peg$parseFlowControl();
          if (s0 as any === peg$FAILED) {
            s0 = peg$parseIO();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseStackManipulation(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseSpace();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsePush();
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseDuplicate();
        if (s2 as any === peg$FAILED) {
          s2 = peg$parseCopy();
          if (s2 as any === peg$FAILED) {
            s2 = peg$parseSwap();
            if (s2 as any === peg$FAILED) {
              s2 = peg$parseDiscard();
              if (s2 as any === peg$FAILED) {
                s2 = peg$parseSlide();
              }
            }
          }
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePush(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseSpace();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseNumber();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDuplicate(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseBreak();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSpace();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c3();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCopy(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseTab();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSpace();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseNumber();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c4(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSwap(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseBreak();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseTab();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDiscard(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseBreak();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBreak();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c6();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSlide(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseTab();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBreak();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseNumber();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c7(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseArithumetic(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseTab();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSpace();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseAdd();
        if (s3 as any === peg$FAILED) {
          s3 = peg$parseSub();
          if (s3 as any === peg$FAILED) {
            s3 = peg$parseMul();
            if (s3 as any === peg$FAILED) {
              s3 = peg$parseDiv();
              if (s3 as any === peg$FAILED) {
                s3 = peg$parseMod();
              }
            }
          }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c8(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAdd(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseSpace();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSpace();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c9();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSub(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseSpace();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseTab();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c10();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMul(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseSpace();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBreak();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c11();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDiv(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseTab();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSpace();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c12();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMod(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseTab();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseTab();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHeapAccess(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseTab();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseTab();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseStore();
        if (s3 as any === peg$FAILED) {
          s3 = peg$parseRetrieve();
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c14(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStore(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseSpace();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c15();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRetrieve(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseTab();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c16();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFlowControl(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseBreak();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseMarkLocation();
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseCallSubroutine();
        if (s2 as any === peg$FAILED) {
          s2 = peg$parseJumpUnconditionally();
          if (s2 as any === peg$FAILED) {
            s2 = peg$parseJumpTopOfStackIsZero();
            if (s2 as any === peg$FAILED) {
              s2 = peg$parseJumpTopOfStackIsNegative();
              if (s2 as any === peg$FAILED) {
                s2 = peg$parseEndSubroutine();
                if (s2 as any === peg$FAILED) {
                  s2 = peg$parseEndProgram();
                }
              }
            }
          }
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c17(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMarkLocation(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseSpace();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSpace();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseLabel();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c18(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCallSubroutine(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseSpace();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseTab();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseLabel();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c19(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseJumpUnconditionally(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseSpace();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBreak();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseLabel();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c20(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseJumpTopOfStackIsZero(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseTab();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSpace();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseLabel();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c21(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseJumpTopOfStackIsNegative(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseTab();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseTab();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseLabel();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c22(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEndSubroutine(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseTab();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBreak();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c23();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEndProgram(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseBreak();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBreak();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIO(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseTab();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBreak();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseOutputChar();
        if (s3 as any === peg$FAILED) {
          s3 = peg$parseOutputNumber();
          if (s3 as any === peg$FAILED) {
            s3 = peg$parseReadChar();
            if (s3 as any === peg$FAILED) {
              s3 = peg$parseReadNumber();
            }
          }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c25(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOutputChar(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseSpace();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSpace();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c26();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOutputNumber(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseSpace();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseTab();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c27();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseReadChar(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseTab();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSpace();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c28();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseReadNumber(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseTab();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseTab();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c29();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLabel(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseSpace();
    if (s2 as any === peg$FAILED) {
      s2 = peg$parseTab();
    }
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseSpace();
        if (s2 as any === peg$FAILED) {
          s2 = peg$parseTab();
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBreak();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c30(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumber(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseSpace();
    if (s2 as any === peg$FAILED) {
      s2 = peg$parseTab();
    }
    if (s2 as any !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseSpace();
      if (s4 as any === peg$FAILED) {
        s4 = peg$parseTab();
      }
      if (s4 as any !== peg$FAILED) {
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseSpace();
          if (s4 as any === peg$FAILED) {
            s4 = peg$parseTab();
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parseBreak();
        if (s4 as any !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c31(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSpace(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c32;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c33); }
    }

    return s0;
  }

  function peg$parseTab(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 9) {
      s0 = peg$c34;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c35); }
    }

    return s0;
  }

  function peg$parseBreak(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c36;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c37); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c38) {
        s0 = peg$c38;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
    }

    return s0;
  }


  	function getSign(signData){
  		return signData === " " ? "" : "-";
  	}
  	function getIntNumber(spaceTabNumberData){
  		const numberBinary = spaceTabNumberData.map((element) => {
  			return element === " "?"0":"1";
  		}).join("");
  		
  		return parseInt(numberBinary,2);
  	}
  	function getLabel(enterLabelAllay){
  		const outPutLabel = enterLabelAllay.map((element) => {
  			return element === " "?"S":"T";
  		}).join("");
  		return outPutLabel;
  	}


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: IParseOptions) => any;
export const parse: ParseFunction = peg$parse;

